use std::sync::Arc;
use std::boxed::Box;

use pyo3::prelude::*;

// FIXME, this is work in progress as diffSL equation has a lifetime parameter
// that PyO3 does not work with natively. This is an experiment using the wrapper
// method in this thread:
// https://users.rust-lang.org/t/safe-hiding-of-lifetime-parameters/53362/10
#[derive(Debug)]
struct B { bx: Box<i32> }

#[derive(Debug)]
struct C {
    b: B,
}

#[derive(Debug)]
struct A<'b> {
    b: &'b B,
}

#[derive(Debug)]
struct SafeContainer {
    c: Arc<C>,
    unsafe_a: A<'static>,
}

impl SafeContainer {
    fn new<'b>(c: &'b Arc<C>) -> Self {
        SafeContainer {
            c: c.clone(),
            unsafe_a: unsafe { std::mem::transmute(A { b: &c.b }) },
        }
    }

    fn a<'b>(&'b self) -> &A<'b> {
        unsafe { std::mem::transmute(&self.unsafe_a) }
    }
}
// FIXME WIP end

/// ODE problem generated by builder
// Implementation note: WIP investigating SafeContainer as a way to resolve lifetimes issue
#[pyclass]
#[pyo3(name = "OdeSolverProblem")]
pub struct PyOdeSolverProblem(SafeContainer);
